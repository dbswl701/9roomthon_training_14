function solution(citations) {
    citations.sort((a, b) => b - a);  // 내림차순으로 정렬

    for(let i = 0; i < citations.length; i++) {
        if(citations[i] <= i) {
            return i;  // H-Index 반환
        }
    }

    return citations.length;  // 모든 논문의 인용 횟수가 논문의 수보다 큰 경우
}

//생각하기
//간단하게 생각하면, n편중에 h번 인용된 논문이 h번이고, 나머지가 h번 이하면, => 그냥 중앙값 찾으란 소리야.
//[3, 0, 6, 1, 5]인데, 3편의 논문이 3회 이상 인용되었고, 나머지는 3회 미만이기때문에 H-index는 3이다.
//배열의 중앙값을 찾고, 중앙값에서 멈추면 그게 h-index아님? => 아닌가?

//다시금 생각하기
//예를 들어보자, 테스트 값말고, [9, 9, 9, 9, 1] 이렇게 있으면, h-index값은 4야. 논문의 숫자래도.
//그럼 이럴경우 h-index를 어떻게 구할까? 라고 생각하면 1부터 맥스값인 10000까지 일일히 돌리는 수밖에 없다.
//근데 임시예제 2같은 경우에는, h번 인용한 함수가 몇개나 있는지 확인해야함. 